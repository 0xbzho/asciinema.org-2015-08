{
  "version": 1,
  "width": 111,
  "height": 30,
  "duration": 45.904894,
  "command": "/bin/bash",
  "title": "",
  "env": {
    "TERM": "rxvt-unicode-256color",
    "SHELL": "/bin/bash"
  },
  "stdout": [
    [
      0.065701,
      "\u001b[38;5;1m$\u001b[m\u001b(B                                                                                                              \r"
    ],
    [
      0.002973,
      "\u001b[38;5;2mizabera\u001b[m\u001b(B@\u001b[38;5;6mnotebook\u001b[m\u001b(B \u001b[38;5;1m~\u001b[38;5;9m/\u001b[38;5;1msv\u001b[38;5;9m/\u001b[38;5;1mbashutils\u001b[m\u001b(B \u001b[38;5;2m$\u001b[m\u001b(B "
    ],
    [
      0.693841,
      "l"
    ],
    [
      0.072698,
      "s"
    ],
    [
      0.145026,
      " "
    ],
    [
      0.326161,
      "|"
    ],
    [
      0.127435,
      " "
    ],
    [
      0.250268,
      "."
    ],
    [
      0.270432,
      "/"
    ],
    [
      0.278034,
      "p"
    ],
    [
      0.086731,
      "a"
    ],
    [
      0.226142,
      "g"
    ],
    [
      0.097158,
      "e"
    ],
    [
      0.097300,
      "r"
    ],
    [
      0.184688,
      "\r\n"
    ],
    [
      0.031476,
      "\u001b[?1049h"
    ],
    [
      0.000792,
      "\u001b[1;1H"
    ],
    [
      0.000050,
      "bash64                                                                                                         \r\n"
    ],
    [
      0.000083,
      "pager                                                                                                          \r\n"
    ],
    [
      0.000074,
      "shex                                                                                                           \r\n"
    ],
    [
      0.000074,
      "swatch                                                                                                         \r\n"
    ],
    [
      0.000072,
      "~                                                                                                              \r\n"
    ],
    [
      0.000065,
      "~                                                                                                              \r\n"
    ],
    [
      0.000068,
      "~                                                                                                              \r\n"
    ],
    [
      0.000066,
      "~                                                                                                              \r\n"
    ],
    [
      0.000067,
      "~                                                                                                              \r\n"
    ],
    [
      0.000071,
      "~                                                                                                              \r\n"
    ],
    [
      0.000065,
      "~                                                                                                              \r\n"
    ],
    [
      0.000066,
      "~                                                                                                              \r\n"
    ],
    [
      0.000066,
      "~                                                                                                              \r\n"
    ],
    [
      0.000066,
      "~                                                                                                              \r\n"
    ],
    [
      0.000072,
      "~                                                                                                              \r\n"
    ],
    [
      0.000065,
      "~                                                                                                              \r\n"
    ],
    [
      0.000068,
      "~                                                                                                              \r\n"
    ],
    [
      0.000066,
      "~                                                                                                              \r\n"
    ],
    [
      0.000067,
      "~                                                                                                              \r\n"
    ],
    [
      0.000067,
      "~                                                                                                              \r\n"
    ],
    [
      0.000071,
      "~                                                                                                              \r\n"
    ],
    [
      0.000065,
      "~                                                                                                              \r\n"
    ],
    [
      0.000066,
      "~                                                                                                              \r\n"
    ],
    [
      0.000066,
      "~                                                                                                              \r\n"
    ],
    [
      0.000067,
      "~                                                                                                              \r\n"
    ],
    [
      0.000072,
      "~                                                                                                              \r\n"
    ],
    [
      0.000064,
      "~                                                                                                              \r\n"
    ],
    [
      0.000067,
      "~                                                                                                              \r\n"
    ],
    [
      0.000066,
      "~                                                                                                              \r\n"
    ],
    [
      0.000092,
      "\u001b[7m\u001b[K(stdin) (1/4)\u001b[m\u001b(B"
    ],
    [
      0.563775,
      "\u001b[1;1H"
    ],
    [
      0.000058,
      "pager                                                                                                          \r\n"
    ],
    [
      0.000170,
      "shex                                                                                                           \r\n"
    ],
    [
      0.000105,
      "swatch                                                                                                         \r\n"
    ],
    [
      0.000107,
      "~                                                                                                              \r\n"
    ],
    [
      0.000107,
      "~                                                                                                              \r\n"
    ],
    [
      0.000107,
      "~                                                                                                              \r\n"
    ],
    [
      0.000106,
      "~                                                                                                              \r\n"
    ],
    [
      0.000106,
      "~                                                                                                              \r\n"
    ],
    [
      0.000105,
      "~                                                                                                              \r\n"
    ],
    [
      0.000107,
      "~                                                                                                              \r\n"
    ],
    [
      0.000106,
      "~                                                                                                              \r\n"
    ],
    [
      0.000107,
      "~                                                                                                              \r\n"
    ],
    [
      0.000104,
      "~                                                                                                              \r\n"
    ],
    [
      0.000106,
      "~                                                                                                              \r\n"
    ],
    [
      0.000105,
      "~                                                                                                              \r\n"
    ],
    [
      0.000105,
      "~                                                                                                              \r\n"
    ],
    [
      0.000104,
      "~                                                                                                              \r\n"
    ],
    [
      0.000094,
      "~                                                                                                              \r\n"
    ],
    [
      0.000092,
      "~                                                                                                              \r\n"
    ],
    [
      0.000104,
      "~                                                                                                              \r\n"
    ],
    [
      0.000105,
      "~                                                                                                              \r\n"
    ],
    [
      0.000105,
      "~                                                                                                              \r\n"
    ],
    [
      0.000105,
      "~                                                                                                              \r\n"
    ],
    [
      0.000105,
      "~                                                                                                              \r\n"
    ],
    [
      0.000105,
      "~                                                                                                              \r\n"
    ],
    [
      0.000106,
      "~                                                                                                              \r\n"
    ],
    [
      0.000105,
      "~                                                                                                              \r\n"
    ],
    [
      0.000104,
      "~                                                                                                              \r\n"
    ],
    [
      0.000109,
      "~                                                                                                              \r\n"
    ],
    [
      0.000210,
      "\u001b[7m\u001b[K(stdin) (2/4)\u001b[m\u001b(B"
    ],
    [
      0.188146,
      "\u001b[1;1Hshex                                                                                                           \r\nswatch                                                                                                         \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[K(stdin) (3/4)\u001b[m\u001b(B"
    ],
    [
      0.183356,
      "\u001b[1;1Hswatch                                                                                                         \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[K(stdin) (4/4)\u001b[m\u001b(B"
    ],
    [
      0.188522,
      "\u001b[1;1Hswatch                                                                                                         \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[K(stdin) (4/4)\u001b[m\u001b(B"
    ],
    [
      0.032857,
      "\u001b[1;1Hshex                                                                                                           \r\nswatch                                                                                                         \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[K(stdin) (3/4)\u001b[m\u001b(B"
    ],
    [
      0.188886,
      "\u001b[1;1Hpager                                                                                                          \r\nshex                                                                                                           \r\nswatch                                                                                                         \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[K(stdin) (2/4)\u001b[m\u001b(B"
    ],
    [
      0.172521,
      "\u001b[1;1Hbash64                                                                                                         \r\npager                                                                                                          \r\nshex                                                                                                           \r\nswatch                                                                                                         \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[K(stdin) (1/4)\u001b[m\u001b(B"
    ],
    [
      0.152223,
      "\u001b[1;1Hbash64                                                                                                         \r\npager                                                                                                          \r\nshex                                                                                                           \r\nswatch                                                                                                         \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[K(stdin) (1/4)\u001b[m\u001b(B"
    ],
    [
      0.176754,
      "\u001b[1;1Hbash64                                                                                                         \r\npager                                                                                                          \r\nshex                                                                                                           \r\nswatch                                                                                                         \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n"
    ],
    [
      0.000033,
      "~                                                                                                              \r\n"
    ],
    [
      0.000319,
      "~                                                                                                              \r\n\u001b[7m\u001b[K(stdin) (1/4)\u001b[m\u001b(B"
    ],
    [
      0.192146,
      "\u001b[1;1Hpager                                                                                                          \r\nshex                                                                                                           \r\nswatch                                                                                                         \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[K(stdin) (2/4)\u001b[m\u001b(B"
    ],
    [
      0.179333,
      "\u001b[1;1Hshex                                                                                                           \r\nswatch                                                                                                         \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[K(stdin) (3/4)\u001b[m\u001b(B"
    ],
    [
      0.172603,
      "\u001b[1;1Hswatch                                                                                                         \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[K(stdin) (4/4)\u001b[m\u001b(B"
    ],
    [
      0.192931,
      "\u001b[1;1Hswatch                                                                                                         \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[K(stdin) (4/4)\u001b[m\u001b(B"
    ],
    [
      0.186258,
      "\u001b[1;1Hshex                                                                                                           \r\nswatch                                                                                                         \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[K(stdin) (3/4)\u001b[m\u001b(B"
    ],
    [
      0.194069,
      "\u001b[1;1Hpager                                                                                                          \r\nshex                                                                                                           \r\nswatch                                                                                                         \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[K(stdin) (2/4)\u001b[m\u001b(B"
    ],
    [
      0.170977,
      "\u001b[1;1Hbash64                                                                                                         \r\npager                                                                                                          \r\nshex                                                                                                           \r\nswatch                                                                                                         \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n"
    ],
    [
      0.001240,
      "~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[K(stdin) (1/4)\u001b[m\u001b(B"
    ],
    [
      0.167890,
      "\u001b[1;1Hbash64                                                                                                         \r\npager                                                                                                          \r\nshex                                                                                                           \r\nswatch                                                                                                         \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[K(stdin) (1/4)\u001b[m\u001b(B"
    ],
    [
      0.350146,
      "\u001b[r\u001b[?1049l"
    ],
    [
      0.000938,
      "\u001b[38;5;1m$\u001b[m\u001b(B                                                                                                              \r"
    ],
    [
      0.001463,
      "\u001b[38;5;2mizabera\u001b[m\u001b(B@\u001b[38;5;6mnotebook\u001b[m\u001b(B \u001b[38;5;1m~\u001b[38;5;9m/\u001b[38;5;1msv\u001b[38;5;9m/\u001b[38;5;1mbashutils\u001b[m\u001b(B \u001b[38;5;2m$\u001b[m\u001b(B "
    ],
    [
      0.761517,
      "."
    ],
    [
      0.259839,
      "/"
    ],
    [
      0.236647,
      "p"
    ],
    [
      0.075585,
      "a"
    ],
    [
      0.075534,
      "g"
    ],
    [
      0.151876,
      "e"
    ],
    [
      0.096627,
      "r"
    ],
    [
      0.146325,
      " "
    ],
    [
      0.496586,
      "p"
    ],
    [
      0.083142,
      "a"
    ],
    [
      0.072545,
      "g"
    ],
    [
      0.220545,
      "er "
    ],
    [
      0.396007,
      "\r\n"
    ],
    [
      0.035433,
      "\u001b[?1049h"
    ],
    [
      0.000989,
      "\u001b[1;1H"
    ],
    [
      0.000096,
      "#!/bin/bash                                                                                                    \r\n"
    ],
    [
      0.000086,
      "# very simple pager with search                                                                                \r\n"
    ],
    [
      0.000069,
      "# TODO: - find a way to print while reading from stdin                                                         \r\n"
    ],
    [
      0.000480,
      "#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n"
    ],
    [
      0.000131,
      "[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\n"
    ],
    [
      0.000015,
      "cup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n"
    ],
    [
      0.000155,
      "                                                                                                               \r\n# slurp stdin first                                                                                            \r\n"
    ],
    [
      0.000089,
      "while read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n"
    ],
    [
      0.000038,
      "  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\n"
    ],
    [
      0.000064,
      "done \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n"
    ],
    [
      0.000067,
      "[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n"
    ],
    [
      0.000070,
      "                                                                                                               \r\n"
    ],
    [
      0.000068,
      "for (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n"
    ],
    [
      0.000064,
      "  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\n"
    ],
    [
      0.000069,
      "done                                                                                                           \r\n"
    ],
    [
      0.000063,
      "                                                                                                               \r\n"
    ],
    [
      0.000067,
      "trap \"tput rmcup\" exit                                                                                         \r\n"
    ],
    [
      0.000071,
      "tput smcup                                                                                                     \r\n"
    ],
    [
      0.000065,
      "tot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n"
    ],
    [
      0.000066,
      "                                                                                                               \r\n"
    ],
    [
      0.000067,
      "search () {                                                                                                    \r\n"
    ],
    [
      0.000067,
      "  while (( $1 )); do                                                                                           \r\n"
    ],
    [
      0.000090,
      "\u001b[7m\u001b[Kpager (1/70)\u001b[m\u001b(B"
    ],
    [
      0.401155,
      "\u001b[1;1H# very simple pager with search                                                                                \r\n# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n\u001b[7m\u001b[Kpager (2/70)\u001b[m\u001b(B"
    ],
    [
      0.161995,
      "\u001b[1;1H# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n\u001b[7m\u001b[Kpager (3/70)\u001b[m\u001b(B"
    ],
    [
      0.193627,
      "\u001b[1;1H  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n  for (( j = i; j \u003c i + lines - 1; j++ )) do                                                                   \r\n    printf \"%s\\n\" \"${input[j]//$search/$hl$search$nohl}\"                                                       \r\n  done                                                                                                         \r\n  if (( err )); then err=0; printf \"%snot found%s\" \"$hl$el\" \"$nohl\"                                            \r\n  else printf \"%s%s (%s/%s)%s\" \"$hl$el\" \"${1-(stdin)}\" \"$((i+1))\" \"$limit\" \"$nohl\"                             \r\n  fi                                                                                                           \r\n  while read -rsN1 char; do                                                                                    \r\n    case $char in                                         # copied from less                                   \r\n       [$'eE\\5jJ\\n\\16']) (( i ++ ));           break;;    # e E ^E j J ^N CR                                   \r\n      [$'yY\\31kK\\v\\20']) (( i -- ));           break;;    # y Y ^Y k K ^K ^P                                   \r\n          [$'fF\\6\\26 ']) (( i += lines ));     break;;    # f F ^F ^V SPACE                                    \r\n              [$'bB\\2']) (( i -= lines ));     break;;    # b B ^B                                             \r\n              [$'dD\\4']) (( i += lines / 2 )); break;;    # d D ^D                                             \r\n             [$'uU\\25']) (( i -= lines / 2 )); break;;    # u U ^U                                             \r\n                      G) (( i = tot ));        break;;                                                         \r\n                      g) (( i = 0 ));          break;;                                                         \r\n                      :) printf %s \"$ll$el\"                                                                    \r\n                         read -rep: j                                                                          \r\n                         [[ $j != *[0-9]* ]] || (( i = j - 1 ))                                                \r\n                         break ;;                                                                              \r\n                   [/?]) printf %s \"$ll$el\"                                                                    \r\n                         read -rep \"$char\" search                                                              \r\n                         history -s -- \"$search\"  ;;\u0026                                                          \r\n\u001b[7m\u001b[Kpager (33/70)\u001b[m\u001b(B"
    ],
    [
      0.192126,
      "\u001b[1;1H                     \\?) j=i+1 search \"j-- \u003e= 0\"  ;;                                                           \r\n                      n) j=i   search \"j++ \u003c tot\" ;;                                                           \r\n                      N) j=i   search \"j-- \u003e= 0\"  ;;                                                           \r\n                   [qQ]) exit                                                                                  \r\n    esac                                                                                                       \r\n  done                                                                                                         \r\n  (( i = i \u003e tot - lines ? tot - lines : i \u003c 0 ? 0 : i ))                                                      \r\ndone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Kpager (63/70)\u001b[m\u001b(B"
    ],
    [
      0.180213,
      "\u001b[1;1Hdone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Kpager (70/70)\u001b[m\u001b(B"
    ],
    [
      0.142481,
      "\u001b[1;1H    printf \"%s\\n\" \"${input[j]//$search/$hl$search$nohl}\"                                                       \r\n  done                                                                                                         \r\n  if (( err )); then err=0; printf \"%snot found%s\" \"$hl$el\" \"$nohl\"                                            \r\n  else printf \"%s%s (%s/%s)%s\" \"$hl$el\" \"${1-(stdin)}\" \"$((i+1))\" \"$limit\" \"$nohl\"                             \r\n  fi                                                                                                           \r\n  while read -rsN1 char; do                                                                                    \r\n    case $char in                                         # copied from less                                   \r\n       [$'eE\\5jJ\\n\\16']) (( i ++ ));           break;;    # e E ^E j J ^N CR                                   \r\n      [$'yY\\31kK\\v\\20']) (( i -- ));           break;;    # y Y ^Y k K ^K ^P                                   \r\n          [$'fF\\6\\26 ']) (( i += lines ));     break;;    # f F ^F ^V SPACE                                    \r\n              [$'bB\\2']) (( i -= lines ));     break;;    # b B ^B                                             \r\n              [$'dD\\4']) (( i += lines / 2 )); break;;    # d D ^D                                             \r\n             [$'uU\\25']) (( i -= lines / 2 )); break;;    # u U ^U                                             \r\n                      G) (( i = tot ));        break;;                                                         \r\n                      g) (( i = 0 ));          break;;                                                         \r\n                      :) printf %s \"$ll$el\"                                                                    \r\n                         read -rep: j                                                                          \r\n                         [[ $j != *[0-9]* ]] || (( i = j - 1 ))                                                \r\n                         break ;;                                                                              \r\n                   [/?]) printf %s \"$ll$el\"                                                                    \r\n                         read -rep \"$char\" search                                                              \r\n                         history -s -- \"$search\"  ;;\u0026                                                          \r\n                      /) j=i-1 search \"j++ \u003c tot\" ;;                                                           \r\n                     \\?) j=i+1 search \"j-- \u003e= 0\"  ;;                                                           \r\n                      n) j=i   search \"j++ \u003c tot\" ;;                                                           \r\n                      N) j=i   search \"j-- \u003e= 0\"  ;;                                                           \r\n                   [qQ]) exit                                                                                  \r\n    esac                                                                                                       \r\n  done                                                                                                         \r\n\u001b[7m\u001b[Kpager (40/70)\u001b[m\u001b(B"
    ],
    [
      0.153676,
      "\u001b[1;1H[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n\u001b[7m\u001b[Kpager (10/70)\u001b[m\u001b(B"
    ],
    [
      0.173690,
      "\u001b[1;1H#!/bin/bash                                                                                                    \r\n# very simple pager with search                                                                                \r\n# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\n"
    ],
    [
      0.000364,
      "trap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n\u001b[7m\u001b[Kpager (1/70)\u001b[m\u001b(B"
    ],
    [
      0.156570,
      "\u001b[1;1H#!/bin/bash                                                                                                    \r\n# very simple pager with search                                                                                \r\n# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n\u001b[7m\u001b[Kpager (1/70)\u001b[m\u001b(B"
    ],
    [
      0.142694,
      "\u001b[1;1H      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n  for (( j = i; j \u003c i + lines - 1; j++ )) do                                                                   \r\n    printf \"%s\\n\" \"${input[j]//$search/$hl$search$nohl}\"                                                       \r\n  done                                                                                                         \r\n  if (( err )); then err=0; printf \"%snot found%s\" \"$hl$el\" \"$nohl\"                                            \r\n  else printf \"%s%s (%s/%s)%s\" \"$hl$el\" \"${1-(stdin)}\" \"$((i+1))\" \"$limit\" \"$nohl\"                             \r\n  fi                                                                                                           \r\n"
    ],
    [
      0.001364,
      "  while read -rsN1 char; do                                                                                    \r\n    case $char in                                         # copied from less                                   \r\n       [$'eE\\5jJ\\n\\16']) (( i ++ ));           break;;    # e E ^E j J ^N CR                                   \r\n      [$'yY\\31kK\\v\\20']) (( i -- ));           break;;    # y Y ^Y k K ^K ^P                                   \r\n          [$'fF\\6\\26 ']) (( i += lines ));     break;;    # f F ^F ^V SPACE                                    \r\n              [$'bB\\2']) (( i -= lines ));     break;;    # b B ^B                                             \r\n              [$'dD\\4']) (( i += lines / 2 )); break;;    # d D ^D                                             \r\n             [$'uU\\25']) (( i -= lines / 2 )); break;;    # u U ^U                                             \r\n                      G) (( i = tot ));        break;;                                                         \r\n                      g) (( i = 0 ));          break;;                                                         \r\n                      :) printf %s \"$ll$el\"                                                                    \r\n                         read -rep: j                                                                          \r\n                         [[ $j != *[0-9]* ]] || (( i = j - 1 ))                                                \r\n                         break ;;                                                                              \r\n                   [/?]) printf %s \"$ll$el\"                                                                    \r\n\u001b[7m\u001b[Kpager (31/70)\u001b[m\u001b(B"
    ],
    [
      0.163879,
      "\u001b[1;1H                         history -s -- \"$search\"  ;;\u0026                                                          \r\n                      /) j=i-1 search \"j++ \u003c tot\" ;;                                                           \r\n                     \\?) j=i+1 search \"j-- \u003e= 0\"  ;;                                                           \r\n                      n) j=i   search \"j++ \u003c tot\" ;;                                                           \r\n                      N) j=i   search \"j-- \u003e= 0\"  ;;                                                           \r\n                   [qQ]) exit                                                                                  \r\n    esac                                                                                                       \r\n  done                                                                                                         \r\n  (( i = i \u003e tot - lines ? tot - lines : i \u003c 0 ? 0 : i ))                                                      \r\ndone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Kpager (61/70)\u001b[m\u001b(B"
    ],
    [
      0.155824,
      "\u001b[1;1Hdone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Kpager (70/70)\u001b[m\u001b(B"
    ],
    [
      0.143568,
      "\u001b[1;1H    printf \"%s\\n\" \"${input[j]//$search/$hl$search$nohl}\"                                                       \r\n  done                                                                                                         \r\n  if (( err )); then err=0; printf \"%snot found%s\" \"$hl$el\" \"$nohl\"                                            \r\n  else printf \"%s%s (%s/%s)%s\" \"$hl$el\" \"${1-(stdin)}\" \"$((i+1))\" \"$limit\" \"$nohl\"                             \r\n  fi                                                                                                           \r\n  while read -rsN1 char; do                                                                                    \r\n    case $char in                                         # copied from less                                   \r\n       [$'eE\\5jJ\\n\\16']) (( i ++ ));           break;;    # e E ^E j J ^N CR                                   \r\n      [$'yY\\31kK\\v\\20']) (( i -- ));           break;;    # y Y ^Y k K ^K ^P                                   \r\n          [$'fF\\6\\26 ']) (( i += lines ));     break;;    # f F ^F ^V SPACE                                    \r\n              [$'bB\\2']) (( i -= lines ));     break;;    # b B ^B                                             \r\n              [$'dD\\4']) (( i += lines / 2 )); break;;    # d D ^D                                             \r\n             [$'uU\\25']) (( i -= lines / 2 )); break;;    # u U ^U                                             \r\n                      G) (( i = tot ));        break;;                                                         \r\n                      g) (( i = 0 ));          break;;                                                         \r\n                      :) printf %s \"$ll$el\"                                                                    \r\n                         read -rep: j                                                                          \r\n                         [[ $j != *[0-9]* ]] || (( i = j - 1 ))                                                \r\n                         break ;;                                                                              \r\n                   [/?]) printf %s \"$ll$el\"                                                                    \r\n                         read -rep \"$char\" search                                                              \r\n                         history -s -- \"$search\"  ;;\u0026                                                          \r\n                      /) j=i-1 search \"j++ \u003c tot\" ;;                                                           \r\n                     \\?) j=i+1 search \"j-- \u003e= 0\"  ;;                                                           \r\n                      n) j=i   search \"j++ \u003c tot\" ;;                                                           \r\n                      N) j=i   search \"j-- \u003e= 0\"  ;;                                                           \r\n                   [qQ]) exit                                                                                  \r\n    esac                                                                                                       \r\n  done                                                                                                         \r\n\u001b[7m\u001b[Kpager (40/70)\u001b[m\u001b(B"
    ],
    [
      0.165442,
      "\u001b[1;1H[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n\u001b[7m\u001b[Kpager (10/70)\u001b[m\u001b(B"
    ],
    [
      0.164504,
      "\u001b[1;1H#!/bin/bash                                                                                                    \r\n# very simple pager with search                                                                                \r\n# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n\u001b[7m\u001b[Kpager (1/70)\u001b[m\u001b(B"
    ],
    [
      0.369777,
      "\u001b[1;1H#!/bin/bash                                                                                                    \r\n# very simple pager with search                                                                                \r\n# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n\u001b[7m\u001b[Kpager (1/70)\u001b[m\u001b(B"
    ],
    [
      0.162450,
      "\u001b[1;1H#!/bin/bash                                                                                                    \r\n# very simple pager with search                                                                                \r\n# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n\u001b[7m\u001b[Kpager (1/70)\u001b[m\u001b(B"
    ],
    [
      0.147297,
      "\u001b[1;1H#!/bin/bash                                                                                                    \r\n# very simple pager with search                                                                                \r\n# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n\u001b[7m\u001b[Kpager (1/70)\u001b[m\u001b(B"
    ],
    [
      0.159088,
      "\u001b[1;1H# very simple pager with search                                                                                \r\n# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n\u001b[7m\u001b[Kpager (2/70)\u001b[m\u001b(B"
    ],
    [
      0.160553,
      "\u001b[1;1H# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n\u001b[7m\u001b[Kpager (3/70)\u001b[m\u001b(B"
    ],
    [
      0.168762,
      "\u001b[1;1H#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n\u001b[7m\u001b[Kpager (4/70)\u001b[m\u001b(B"
    ],
    [
      0.164482,
      "\u001b[1;1H#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n\u001b[7m\u001b[Kpager (5/70)\u001b[m\u001b(B"
    ],
    [
      0.160109,
      "\u001b[1;1H#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n\u001b[7m\u001b[Kpager (6/70)\u001b[m\u001b(B"
    ],
    [
      0.160806,
      "\u001b[1;1H#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n\u001b[7m\u001b[Kpager (7/70)\u001b[m\u001b(B"
    ],
    [
      0.173082,
      "\u001b[1;1H                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\n\u001b[7m\u001b[Kpager (8/70)\u001b[m\u001b(B"
    ],
    [
      0.369063,
      "\u001b[1;1H                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n  for (( j = i; j \u003c i + lines - 1; j++ )) do                                                                   \r\n    printf \"%s\\n\" \"${input[j]//$search/$hl$search$nohl}\"                                                       \r\n  done                                                                                                         \r\n  if (( err )); then err=0; printf \"%snot found%s\" \"$hl$el\" \"$nohl\"                                            \r\n  else printf \"%s%s (%s/%s)%s\" \"$hl$el\" \"${1-(stdin)}\" \"$((i+1))\" \"$limit\" \"$nohl\"                             \r\n  fi                                                                                                           \r\n  while read -rsN1 char; do                                                                                    \r\n    case $char in                                         # copied from less                                   \r\n       [$'eE\\5jJ\\n\\16']) (( i ++ ));           break;;    # e E ^E j J ^N CR                                   \r\n      [$'yY\\31kK\\v\\20']) (( i -- ));           break;;    # y Y ^Y k K ^K ^P                                   \r\n          [$'fF\\6\\26 ']) (( i += lines ));     break;;    # f F ^F ^V SPACE                                    \r\n              [$'bB\\2']) (( i -= lines ));     break;;    # b B ^B                                             \r\n              [$'dD\\4']) (( i += lines / 2 )); break;;    # d D ^D                                             \r\n\u001b[7m\u001b[Kpager (23/70)\u001b[m\u001b(B"
    ],
    [
      0.214422,
      "\u001b[1;1H  printf %s \"$cup\"                                                                                             \r\n  for (( j = i; j \u003c i + lines - 1; j++ )) do                                                                   \r\n    printf \"%s\\n\" \"${input[j]//$search/$hl$search$nohl}\"                                                       \r\n  done                                                                                                         \r\n  if (( err )); then err=0; printf \"%snot found%s\" \"$hl$el\" \"$nohl\"                                            \r\n  else printf \"%s%s (%s/%s)%s\" \"$hl$el\" \"${1-(stdin)}\" \"$((i+1))\" \"$limit\" \"$nohl\"                             \r\n  fi                                                                                                           \r\n  while read -rsN1 char; do                                                                                    \r\n    case $char in                                         # copied from less                                   \r\n       [$'eE\\5jJ\\n\\16']) (( i ++ ));           break;;    # e E ^E j J ^N CR                                   \r\n      [$'yY\\31kK\\v\\20']) (( i -- ));           break;;    # y Y ^Y k K ^K ^P                                   \r\n          [$'fF\\6\\26 ']) (( i += lines ));     break;;    # f F ^F ^V SPACE                                    \r\n              [$'bB\\2']) (( i -= lines ));     break;;    # b B ^B                                             \r\n              [$'dD\\4']) (( i += lines / 2 )); break;;    # d D ^D                                             \r\n             [$'uU\\25']) (( i -= lines / 2 )); break;;    # u U ^U                                             \r\n                      G) (( i = tot ));        break;;                                                         \r\n                      g) (( i = 0 ));          break;;                                                         \r\n                      :) printf %s \"$ll$el\"                                                                    \r\n                         read -rep: j                                                                          \r\n                         [[ $j != *[0-9]* ]] || (( i = j - 1 ))                                                \r\n                         break ;;                                                                              \r\n                   [/?]) printf %s \"$ll$el\"                                                                    \r\n                         read -rep \"$char\" search                                                              \r\n                         history -s -- \"$search\"  ;;\u0026                                                          \r\n                      /) j=i-1 search \"j++ \u003c tot\" ;;                                                           \r\n                     \\?) j=i+1 search \"j-- \u003e= 0\"  ;;                                                           \r\n                      n) j=i   search \"j++ \u003c tot\" ;;                                                           \r\n                      N) j=i   search \"j-- \u003e= 0\"  ;;                                                           \r\n                   [qQ]) exit                                                                                  \r\n\u001b[7m\u001b[Kpager (38/70)\u001b[m\u001b(B"
    ],
    [
      0.240096,
      "\u001b[1;1H                      G) (( i = tot ));        break;;                                                         \r\n                      g) (( i = 0 ));          break;;                                                         \r\n                      :) printf %s \"$ll$el\"                                                                    \r\n                         read -rep: j                                                                          \r\n                         [[ $j != *[0-9]* ]] || (( i = j - 1 ))                                                \r\n                         break ;;                                                                              \r\n                   [/?]) printf %s \"$ll$el\"                                                                    \r\n                         read -rep \"$char\" search                                                              \r\n                         history -s -- \"$search\"  ;;\u0026                                                          \r\n                      /) j=i-1 search \"j++ \u003c tot\" ;;                                                           \r\n                     \\?) j=i+1 search \"j-- \u003e= 0\"  ;;                                                           \r\n                      n) j=i   search \"j++ \u003c tot\" ;;                                                           \r\n                      N) j=i   search \"j-- \u003e= 0\"  ;;                                                           \r\n                   [qQ]) exit                                                                                  \r\n    esac                                                                                                       \r\n  done                                                                                                         \r\n  (( i = i \u003e tot - lines ? tot - lines : i \u003c 0 ? 0 : i ))                                                      \r\ndone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Kpager (53/70)\u001b[m\u001b(B"
    ],
    [
      0.179720,
      "\u001b[1;1H  done                                                                                                         \r\n  (( i = i \u003e tot - lines ? tot - lines : i \u003c 0 ? 0 : i ))                                                      \r\ndone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Kpager (68/70)\u001b[m\u001b(B"
    ],
    [
      0.283606,
      "\u001b[1;1H                      G) (( i = tot ));        break;;                                                         \r\n                      g) (( i = 0 ));          break;;                                                         \r\n                      :) printf %s \"$ll$el\"                                                                    \r\n                         read -rep: j                                                                          \r\n                         [[ $j != *[0-9]* ]] || (( i = j - 1 ))                                                \r\n                         break ;;                                                                              \r\n                   [/?]) printf %s \"$ll$el\"                                                                    \r\n                         read -rep \"$char\" search                                                              \r\n                         history -s -- \"$search\"  ;;\u0026                                                          \r\n                      /) j=i-1 search \"j++ \u003c tot\" ;;                                                           \r\n                     \\?) j=i+1 search \"j-- \u003e= 0\"  ;;                                                           \r\n                      n) j=i   search \"j++ \u003c tot\" ;;                                                           \r\n                      N) j=i   search \"j-- \u003e= 0\"  ;;                                                           \r\n                   [qQ]) exit                                                                                  \r\n    esac                                                                                                       \r\n  done                                                                                                         \r\n  (( i = i \u003e tot - lines ? tot - lines : i \u003c 0 ? 0 : i ))                                                      \r\ndone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Kpager (53/70)\u001b[m\u001b(B"
    ],
    [
      0.181426,
      "\u001b[1;1H  printf %s \"$cup\"                                                                                             \r\n  for (( j = i; j \u003c i + lines - 1; j++ )) do                                                                   \r\n    printf \"%s\\n\" \"${input[j]//$search/$hl$search$nohl}\"                                                       \r\n  done                                                                                                         \r\n  if (( err )); then err=0; printf \"%snot found%s\" \"$hl$el\" \"$nohl\"                                            \r\n  else printf \"%s%s (%s/%s)%s\" \"$hl$el\" \"${1-(stdin)}\" \"$((i+1))\" \"$limit\" \"$nohl\"                             \r\n  fi                                                                                                           \r\n  while read -rsN1 char; do                                                                                    \r\n    case $char in                                         # copied from less                                   \r\n       [$'eE\\5jJ\\n\\16']) (( i ++ ));           break;;    # e E ^E j J ^N CR                                   \r\n      [$'yY\\31kK\\v\\20']) (( i -- ));           break;;    # y Y ^Y k K ^K ^P                                   \r\n          [$'fF\\6\\26 ']) (( i += lines ));     break;;    # f F ^F ^V SPACE                                    \r\n              [$'bB\\2']) (( i -= lines ));     break;;    # b B ^B                                             \r\n              [$'dD\\4']) (( i += lines / 2 )); break;;    # d D ^D                                             \r\n             [$'uU\\25']) (( i -= lines / 2 )); break;;    # u U ^U                                             \r\n                      G) (( i = tot ));        break;;                                                         \r\n                      g) (( i = 0 ));          break;;                                                         \r\n                      :) printf %s \"$ll$el\"                                                                    \r\n                         read -rep: j                                                                          \r\n                         [[ $j != *[0-9]* ]] || (( i = j - 1 ))                                                \r\n                         break ;;                                                                              \r\n                   [/?]) printf %s \"$ll$el\"                                                                    \r\n                         read -rep \"$char\" search                                                              \r\n                         history -s -- \"$search\"  ;;\u0026                                                          \r\n                      /) j=i-1 search \"j++ \u003c tot\" ;;                                                           \r\n                     \\?) j=i+1 search \"j-- \u003e= 0\"  ;;                                                           \r\n                      n) j=i   search \"j++ \u003c tot\" ;;                                                           \r\n                      N) j=i   search \"j-- \u003e= 0\"  ;;                                                           \r\n                   [qQ]) exit                                                                                  \r\n\u001b[7m\u001b[Kpager (38/70)\u001b[m\u001b(B"
    ],
    [
      0.178545,
      "\u001b[1;1H                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n  for (( j = i; j \u003c i + lines - 1; j++ )) do                                                                   \r\n    printf \"%s\\n\" \"${input[j]//$search/$hl$search$nohl}\"                                                       \r\n  done                                                                                                         \r\n  if (( err )); then err=0; printf \"%snot found%s\" \"$hl$el\" \"$nohl\"                                            \r\n  else printf \"%s%s (%s/%s)%s\" \"$hl$el\" \"${1-(stdin)}\" \"$((i+1))\" \"$limit\" \"$nohl\"                             \r\n  fi                                                                                                           \r\n  while read -rsN1 char; do                                                                                    \r\n    case $char in                                         # copied from less                                   \r\n       [$'eE\\5jJ\\n\\16']) (( i ++ ));           break;;    # e E ^E j J ^N CR                                   \r\n      [$'yY\\31kK\\v\\20']) (( i -- ));           break;;    # y Y ^Y k K ^K ^P                                   \r\n          [$'fF\\6\\26 ']) (( i += lines ));     break;;    # f F ^F ^V SPACE                                    \r\n              [$'bB\\2']) (( i -= lines ));     break;;    # b B ^B                                             \r\n              [$'dD\\4']) (( i += lines / 2 )); break;;    # d D ^D                                             \r\n\u001b[7m\u001b[Kpager (23/70)\u001b[m\u001b(B"
    ],
    [
      0.168851,
      "\u001b[1;1H                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\n\u001b[7m\u001b[Kpager (8/70)\u001b[m\u001b(B"
    ],
    [
      0.173898,
      "\u001b[1;1H#!/bin/bash                                                                                                    \r\n# very simple pager with search                                                                                \r\n# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n\u001b[7m\u001b[Kpager (1/70)\u001b[m\u001b(B"
    ],
    [
      0.244795,
      "\u001b[1;1H  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n  for (( j = i; j \u003c i + lines - 1; j++ )) do                                                                   \r\n    printf \"%s\\n\" \"${input[j]//$search/$hl$search$nohl}\"                                                       \r\n  done                                                                                                         \r\n  if (( err )); then err=0; printf \"%snot found%s\" \"$hl$el\" \"$nohl\"                                            \r\n  else printf \"%s%s (%s/%s)%s\" \"$hl$el\" \"${1-(stdin)}\" \"$((i+1))\" \"$limit\" \"$nohl\"                             \r\n  fi                                                                                                           \r\n\u001b[7m\u001b[Kpager (16/70)\u001b[m\u001b(B"
    ],
    [
      0.227820,
      "\u001b[1;1H      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n  for (( j = i; j \u003c i + lines - 1; j++ )) do                                                                   \r\n    printf \"%s\\n\" \"${input[j]//$search/$hl$search$nohl}\"                                                       \r\n  done                                                                                                         \r\n  if (( err )); then err=0; printf \"%snot found%s\" \"$hl$el\" \"$nohl\"                                            \r\n  else printf \"%s%s (%s/%s)%s\" \"$hl$el\" \"${1-(stdin)}\" \"$((i+1))\" \"$limit\" \"$nohl\"                             \r\n  fi                                                                                                           \r\n  while read -rsN1 char; do                                                                                    \r\n    case $char in                                         # copied from less                                   \r\n       [$'eE\\5jJ\\n\\16']) (( i ++ ));           break;;    # e E ^E j J ^N CR                                   \r\n      [$'yY\\31kK\\v\\20']) (( i -- ));           break;;    # y Y ^Y k K ^K ^P                                   \r\n          [$'fF\\6\\26 ']) (( i += lines ));     break;;    # f F ^F ^V SPACE                                    \r\n              [$'bB\\2']) (( i -= lines ));     break;;    # b B ^B                                             \r\n              [$'dD\\4']) (( i += lines / 2 )); break;;    # d D ^D                                             \r\n             [$'uU\\25']) (( i -= lines / 2 )); break;;    # u U ^U                                             \r\n                      G) (( i = tot ));        break;;                                                         \r\n                      g) (( i = 0 ));          break;;                                                         \r\n                      :) printf %s \"$ll$el\"                                                                    \r\n                         read -rep: j                                                                          \r\n                         [[ $j != *[0-9]* ]] || (( i = j - 1 ))                                                \r\n                         break ;;                                                                              \r\n                   [/?]) printf %s \"$ll$el\"                                                                    \r\n\u001b[7m\u001b[Kpager (31/70)\u001b[m\u001b(B"
    ],
    [
      0.241652,
      "\u001b[1;1H    case $char in                                         # copied from less                                   \r\n       [$'eE\\5jJ\\n\\16']) (( i ++ ));           break;;    # e E ^E j J ^N CR                                   \r\n      [$'yY\\31kK\\v\\20']) (( i -- ));           break;;    # y Y ^Y k K ^K ^P                                   \r\n          [$'fF\\6\\26 ']) (( i += lines ));     break;;    # f F ^F ^V SPACE                                    \r\n              [$'bB\\2']) (( i -= lines ));     break;;    # b B ^B                                             \r\n              [$'dD\\4']) (( i += lines / 2 )); break;;    # d D ^D                                             \r\n             [$'uU\\25']) (( i -= lines / 2 )); break;;    # u U ^U                                             \r\n                      G) (( i = tot ));        break;;                                                         \r\n                      g) (( i = 0 ));          break;;                                                         \r\n                      :) printf %s \"$ll$el\"                                                                    \r\n                         read -rep: j                                                                          \r\n                         [[ $j != *[0-9]* ]] || (( i = j - 1 ))                                                \r\n"
    ],
    [
      0.001300,
      "                         break ;;                                                                              \r\n                   [/?]) printf %s \"$ll$el\"                                                                    \r\n                         read -rep \"$char\" search                                                              \r\n                         history -s -- \"$search\"  ;;\u0026                                                          \r\n                      /) j=i-1 search \"j++ \u003c tot\" ;;                                                           \r\n                     \\?) j=i+1 search \"j-- \u003e= 0\"  ;;                                                           \r\n                      n) j=i   search \"j++ \u003c tot\" ;;                                                           \r\n                      N) j=i   search \"j-- \u003e= 0\"  ;;                                                           \r\n                   [qQ]) exit                                                                                  \r\n    esac                                                                                                       \r\n  done                                                                                                         \r\n  (( i = i \u003e tot - lines ? tot - lines : i \u003c 0 ? 0 : i ))                                                      \r\ndone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Kpager (46/70)\u001b[m\u001b(B"
    ],
    [
      0.183037,
      "\u001b[1;1H                         history -s -- \"$search\"  ;;\u0026                                                          \r\n                      /) j=i-1 search \"j++ \u003c tot\" ;;                                                           \r\n                     \\?) j=i+1 search \"j-- \u003e= 0\"  ;;                                                           \r\n                      n) j=i   search \"j++ \u003c tot\" ;;                                                           \r\n                      N) j=i   search \"j-- \u003e= 0\"  ;;                                                           \r\n                   [qQ]) exit                                                                                  \r\n    esac                                                                                                       \r\n  done                                                                                                         \r\n  (( i = i \u003e tot - lines ? tot - lines : i \u003c 0 ? 0 : i ))                                                      \r\ndone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Kpager (61/70)\u001b[m\u001b(B"
    ],
    [
      0.192058,
      "\u001b[1;1H    case $char in                                         # copied from less                                   \r\n       [$'eE\\5jJ\\n\\16']) (( i ++ ));           break;;    # e E ^E j J ^N CR                                   \r\n      [$'yY\\31kK\\v\\20']) (( i -- ));           break;;    # y Y ^Y k K ^K ^P                                   \r\n          [$'fF\\6\\26 ']) (( i += lines ));     break;;    # f F ^F ^V SPACE                                    \r\n              [$'bB\\2']) (( i -= lines ));     break;;    # b B ^B                                             \r\n              [$'dD\\4']) (( i += lines / 2 )); break;;    # d D ^D                                             \r\n             [$'uU\\25']) (( i -= lines / 2 )); break;;    # u U ^U                                             \r\n                      G) (( i = tot ));        break;;                                                         \r\n                      g) (( i = 0 ));          break;;                                                         \r\n                      :) printf %s \"$ll$el\"                                                                    \r\n                         read -rep: j                                                                          \r\n                         [[ $j != *[0-9]* ]] || (( i = j - 1 ))                                                \r\n                         break ;;                                                                              \r\n                   [/?]) printf %s \"$ll$el\"                                                                    \r\n                         read -rep \"$char\" search                                                              \r\n                         history -s -- \"$search\"  ;;\u0026                                                          \r\n                      /) j=i-1 search \"j++ \u003c tot\" ;;                                                           \r\n                     \\?) j=i+1 search \"j-- \u003e= 0\"  ;;                                                           \r\n                      n) j=i   search \"j++ \u003c tot\" ;;                                                           \r\n                      N) j=i   search \"j-- \u003e= 0\"  ;;                                                           \r\n                   [qQ]) exit                                                                                  \r\n    esac                                                                                                       \r\n  done                                                                                                         \r\n  (( i = i \u003e tot - lines ? tot - lines : i \u003c 0 ? 0 : i ))                                                      \r\ndone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Kpager (46/70)\u001b[m\u001b(B"
    ],
    [
      0.172948,
      "\u001b[1;1H      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n  for (( j = i; j \u003c i + lines - 1; j++ )) do                                                                   \r\n    printf \"%s\\n\" \"${input[j]//$search/$hl$search$nohl}\"                                                       \r\n  done                                                                                                         \r\n  if (( err )); then err=0; printf \"%snot found%s\" \"$hl$el\" \"$nohl\"                                            \r\n  else printf \"%s%s (%s/%s)%s\" \"$hl$el\" \"${1-(stdin)}\" \"$((i+1))\" \"$limit\" \"$nohl\"                             \r\n  fi                                                                                                           \r\n  while read -rsN1 char; do                                                                                    \r\n    case $char in                                         # copied from less                                   \r\n       [$'eE\\5jJ\\n\\16']) (( i ++ ));           break;;    # e E ^E j J ^N CR                                   \r\n      [$'yY\\31kK\\v\\20']) (( i -- ));           break;;    # y Y ^Y k K ^K ^P                                   \r\n          [$'fF\\6\\26 ']) (( i += lines ));     break;;    # f F ^F ^V SPACE                                    \r\n              [$'bB\\2']) (( i -= lines ));     break;;    # b B ^B                                             \r\n              [$'dD\\4']) (( i += lines / 2 )); break;;    # d D ^D                                             \r\n             [$'uU\\25']) (( i -= lines / 2 )); break;;    # u U ^U                                             \r\n                      G) (( i = tot ));        break;;                                                         \r\n                      g) (( i = 0 ));          break;;                                                         \r\n                      :) printf %s \"$ll$el\"                                                                    \r\n                         read -rep: j                                                                          \r\n                         [[ $j != *[0-9]* ]] || (( i = j - 1 ))                                                \r\n                         break ;;                                                                              \r\n                   [/?]) printf %s \"$ll$el\"                                                                    \r\n\u001b[7m\u001b[Kpager (31/70)\u001b[m\u001b(B"
    ],
    [
      0.191407,
      "\u001b[1;1H  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n  for (( j = i; j \u003c i + lines - 1; j++ )) do                                                                   \r\n    printf \"%s\\n\" \"${input[j]//$search/$hl$search$nohl}\"                                                       \r\n  done                                                                                                         \r\n  if (( err )); then err=0; printf \"%snot found%s\" \"$hl$el\" \"$nohl\"                                            \r\n  else printf \"%s%s (%s/%s)%s\" \"$hl$el\" \"${1-(stdin)}\" \"$((i+1))\" \"$limit\" \"$nohl\"                             \r\n  fi                                                                                                           \r\n\u001b[7m\u001b[Kpager (16/70)\u001b[m\u001b(B"
    ],
    [
      0.184161,
      "\u001b[1;1H#!/bin/bash                                                                                                    \r\n# very simple pager with search                                                                                \r\n# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n\u001b[7m\u001b[Kpager (1/70)\u001b[m\u001b(B"
    ],
    [
      0.185642,
      "\u001b[1;1H#!/bin/bash                                                                                                    \r\n# very simple pager with search                                                                                \r\n# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n\u001b[7m\u001b[Kpager (1/70)\u001b[m\u001b(B"
    ],
    [
      0.235144,
      "\u001b[1;1H  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n  for (( j = i; j \u003c i + lines - 1; j++ )) do                                                                   \r\n    printf \"%s\\n\" \"${input[j]//$search/$hl$search$nohl}\"                                                       \r\n  done                                                                                                         \r\n  if (( err )); then err=0; printf \"%snot found%s\" \"$hl$el\" \"$nohl\"                                            \r\n  else printf \"%s%s (%s/%s)%s\" \"$hl$el\" \"${1-(stdin)}\" \"$((i+1))\" \"$limit\" \"$nohl\"                             \r\n  fi                                                                                                           \r\n\u001b[7m\u001b[Kpager (16/70)\u001b[m\u001b(B"
    ],
    [
      0.333974,
      "\u001b[1;1H      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n  for (( j = i; j \u003c i + lines - 1; j++ )) do                                                                   \r\n    printf \"%s\\n\" \"${input[j]//$search/$hl$search$nohl}\"                                                       \r\n  done                                                                                                         \r\n  if (( err )); then err=0; printf \"%snot found%s\" \"$hl$el\" \"$nohl\"                                            \r\n  else printf \"%s%s (%s/%s)%s\" \"$hl$el\" \"${1-(stdin)}\" \"$((i+1))\" \"$limit\" \"$nohl\"                             \r\n  fi                                                                                                           \r\n  while read -rsN1 char; do                                                                                    \r\n    case $char in                                         # copied from less                                   \r\n       [$'eE\\5jJ\\n\\16']) (( i ++ ));           break;;    # e E ^E j J ^N CR                                   \r\n      [$'yY\\31kK\\v\\20']) (( i -- ));           break;;    # y Y ^Y k K ^K ^P                                   \r\n          [$'fF\\6\\26 ']) (( i += lines ));     break;;    # f F ^F ^V SPACE                                    \r\n              [$'bB\\2']) (( i -= lines ));     break;;    # b B ^B                                             \r\n              [$'dD\\4']) (( i += lines / 2 )); break;;    # d D ^D                                             \r\n             [$'uU\\25']) (( i -= lines / 2 )); break;;    # u U ^U                                             \r\n                      G) (( i = tot ));        break;;                                                         \r\n                      g) (( i = 0 ));          break;;                                                         \r\n                      :) printf %s \"$ll$el\"                                                                    \r\n                         read -rep: j                                                                          \r\n                         [[ $j != *[0-9]* ]] || (( i = j - 1 ))                                                \r\n                         break ;;                                                                              \r\n                   [/?]) printf %s \"$ll$el\"                                                                    \r\n\u001b[7m\u001b[Kpager (31/70)\u001b[m\u001b(B"
    ],
    [
      0.194787,
      "\u001b[1;1H    case $char in                                         # copied from less                                   \r\n       [$'eE\\5jJ\\n\\16']) (( i ++ ));           break;;    # e E ^E j J ^N CR                                   \r\n      [$'yY\\31kK\\v\\20']) (( i -- ));           break;;    # y Y ^Y k K ^K ^P                                   \r\n          [$'fF\\6\\26 ']) (( i += lines ));     break;;    # f F ^F ^V SPACE                                    \r\n              [$'bB\\2']) (( i -= lines ));     break;;    # b B ^B                                             \r\n              [$'dD\\4']) (( i += lines / 2 )); break;;    # d D ^D                                             \r\n             [$'uU\\25']) (( i -= lines / 2 )); break;;    # u U ^U                                             \r\n                      G) (( i = tot ));        break;;                                                         \r\n                      g) (( i = 0 ));          break;;                                                         \r\n                      :) printf %s \"$ll$el\"                                                                    \r\n                         read -rep: j                                                                          \r\n                         [[ $j != *[0-9]* ]] || (( i = j - 1 ))                                                \r\n                         break ;;                                                                              \r\n                   [/?]) printf %s \"$ll$el\"                                                                    \r\n                         read -rep \"$char\" search                                                              \r\n                         history -s -- \"$search\"  ;;\u0026                                                          \r\n                      /) j=i-1 search \"j++ \u003c tot\" ;;                                                           \r\n                     \\?) j=i+1 search \"j-- \u003e= 0\"  ;;                                                           \r\n                      n) j=i   search \"j++ \u003c tot\" ;;                                                           \r\n                      N) j=i   search \"j-- \u003e= 0\"  ;;                                                           \r\n                   [qQ]) exit                                                                                  \r\n    esac                                                                                                       \r\n  done                                                                                                         \r\n  (( i = i \u003e tot - lines ? tot - lines : i \u003c 0 ? 0 : i ))                                                      \r\ndone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Kpager (46/70)\u001b[m\u001b(B"
    ],
    [
      0.161395,
      "\u001b[1;1H      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n  for (( j = i; j \u003c i + lines - 1; j++ )) do                                                                   \r\n    printf \"%s\\n\" \"${input[j]//$search/$hl$search$nohl}\"                                                       \r\n  done                                                                                                         \r\n  if (( err )); then err=0; printf \"%snot found%s\" \"$hl$el\" \"$nohl\"                                            \r\n  else printf \"%s%s (%s/%s)%s\" \"$hl$el\" \"${1-(stdin)}\" \"$((i+1))\" \"$limit\" \"$nohl\"                             \r\n  fi                                                                                                           \r\n  while read -rsN1 char; do                                                                                    \r\n    case $char in                                         # copied from less                                   \r\n       [$'eE\\5jJ\\n\\16']) (( i ++ ));           break;;    # e E ^E j J ^N CR                                   \r\n      [$'yY\\31kK\\v\\20']) (( i -- ));           break;;    # y Y ^Y k K ^K ^P                                   \r\n          [$'fF\\6\\26 ']) (( i += lines ));     break;;    # f F ^F ^V SPACE                                    \r\n              [$'bB\\2']) (( i -= lines ));     break;;    # b B ^B                                             \r\n              [$'dD\\4']) (( i += lines / 2 )); break;;    # d D ^D                                             \r\n             [$'uU\\25']) (( i -= lines / 2 )); break;;    # u U ^U                                             \r\n                      G) (( i = tot ));        break;;                                                         \r\n                      g) (( i = 0 ));          break;;                                                         \r\n                      :) printf %s \"$ll$el\"                                                                    \r\n                         read -rep: j                                                                          \r\n                         [[ $j != *[0-9]* ]] || (( i = j - 1 ))                                                \r\n                         break ;;                                                                              \r\n                   [/?]) printf %s \"$ll$el\"                                                                    \r\n\u001b[7m\u001b[Kpager (31/70)\u001b[m\u001b(B"
    ],
    [
      0.172231,
      "\u001b[1;1H  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n  for (( j = i; j \u003c i + lines - 1; j++ )) do                                                                   \r\n    printf \"%s\\n\" \"${input[j]//$search/$hl$search$nohl}\"                                                       \r\n  done                                                                                                         \r\n  if (( err )); then err=0; printf \"%snot found%s\" \"$hl$el\" \"$nohl\"                                            \r\n  else printf \"%s%s (%s/%s)%s\" \"$hl$el\" \"${1-(stdin)}\" \"$((i+1))\" \"$limit\" \"$nohl\"                             \r\n  fi                                                                                                           \r\n\u001b[7m\u001b[Kpager (16/70)\u001b[m\u001b(B"
    ],
    [
      0.173241,
      "\u001b[1;1H#!/bin/bash                                                                                                    \r\n# very simple pager with search                                                                                \r\n# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n\u001b[7m\u001b[Kpager (1/70)\u001b[m\u001b(B"
    ],
    [
      0.186002,
      "\u001b[1;1H#!/bin/bash                                                                                                    \r\n# very simple pager with search                                                                                \r\n# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n\u001b[7m\u001b[Kpager (1/70)\u001b[m\u001b(B"
    ],
    [
      0.459947,
      "\u001b[31;1H\u001b[K/"
    ],
    [
      0.268765,
      "e"
    ],
    [
      0.205069,
      "x"
    ],
    [
      0.113345,
      "i"
    ],
    [
      0.134456,
      "t"
    ],
    [
      0.119386,
      "\r\n\u001b[1;1H[[ -t 1 ]] || { cat ; \u001b[7mexit\u001b[m\u001b(B; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" \u001b[7mexit\u001b[m\u001b(B                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n\u001b[7m\u001b[Kpager (10/70)\u001b[m\u001b(B"
    ],
    [
      0.497763,
      "\u001b[1;1Htrap \"tput rmcup\" \u001b[7mexit\u001b[m\u001b(B                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n  for (( j = i; j \u003c i + lines - 1; j++ )) do                                                                   \r\n    printf \"%s\\n\" \"${input[j]//$search/$hl$search$nohl}\"                                                       \r\n  done                                                                                                         \r\n  if (( err )); then err=0; printf \"%snot found%s\" \"$hl$el\" \"$nohl\"                                            \r\n  else printf \"%s%s (%s/%s)%s\" \"$hl$el\" \"${1-(stdin)}\" \"$((i+1))\" \"$limit\" \"$nohl\"                             \r\n  fi                                                                                                           \r\n  while read -rsN1 char; do                                                                                    \r\n    case $char in                                         # copied from less                                   \r\n       [$'eE\\5jJ\\n\\16']) (( i ++ ));           break;;    # e E ^E j J ^N CR                                   \r\n      [$'yY\\31kK\\v\\20']) (( i -- ));           break;;    # y Y ^Y k K ^K ^P                                   \r\n          [$'fF\\6\\26 ']) (( i += lines ));     break;;    # f F ^F ^V SPACE                                    \r\n              [$'bB\\2']) (( i -= lines ));     break;;    # b B ^B                                             \r\n              [$'dD\\4']) (( i += lines / 2 )); break;;    # d D ^D                                             \r\n             [$'uU\\25']) (( i -= lines / 2 )); break;;    # u U ^U                                             \r\n\u001b[7m\u001b[Kpager (24/70)\u001b[m\u001b(B"
    ],
    [
      0.181079,
      "\u001b[1;1H                   [qQ]) \u001b[7mexit\u001b[m\u001b(B                                                                                  \r\n    esac                                                                                                       \r\n  done                                                                                                         \r\n  (( i = i \u003e tot - lines ? tot - lines : i \u003c 0 ? 0 : i ))                                                      \r\ndone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Kpager (66/70)\u001b[m\u001b(B"
    ],
    [
      0.187677,
      "\u001b[1;1H                   [qQ]) \u001b[7mexit\u001b[m\u001b(B                                                                                  \r\n    esac                                                                                                       \r\n  done                                                                                                         \r\n  (( i = i \u003e tot - lines ? tot - lines : i \u003c 0 ? 0 : i ))                                                      \r\ndone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Knot found\u001b[m\u001b(B"
    ],
    [
      0.282825,
      "\u001b[1;1Htrap \"tput rmcup\" \u001b[7mexit\u001b[m\u001b(B                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n"
    ],
    [
      0.000029,
      "                                                                                                               \r\n"
    ],
    [
      0.000160,
      "while :; do                                                                                                    \r\n"
    ],
    [
      0.000006,
      "  printf %s \"$cup\"                                                                                             \r\n"
    ],
    [
      0.000082,
      "  for (( j = i; j \u003c i + lines - 1; j++ )) do                                                                   \r\n"
    ],
    [
      0.000083,
      "    printf \"%s\\n\" \"${input[j]//$search/$hl$search$nohl}\"                                                       \r\n"
    ],
    [
      0.000098,
      "  done                                                                                                         \r\n"
    ],
    [
      0.000083,
      "  if (( err )); then err=0; printf \"%snot found%s\" \"$hl$el\" \"$nohl\"                                            \r\n"
    ],
    [
      0.000084,
      "  else printf \"%s%s (%s/%s)%s\" \"$hl$el\" \"${1-(stdin)}\" \"$((i+1))\" \"$limit\" \"$nohl\"                             \r\n"
    ],
    [
      0.000078,
      "  fi                                                                                                           \r\n"
    ],
    [
      0.000079,
      "  while read -rsN1 char; do                                                                                    \r\n"
    ],
    [
      0.000078,
      "    case $char in                                         # copied from less                                   \r\n"
    ],
    [
      0.000080,
      "       [$'eE\\5jJ\\n\\16']) (( i ++ ));           break;;    # e E ^E j J ^N CR                                   \r\n"
    ],
    [
      0.000078,
      "      [$'yY\\31kK\\v\\20']) (( i -- ));           break;;    # y Y ^Y k K ^K ^P                                   \r\n"
    ],
    [
      0.000080,
      "          [$'fF\\6\\26 ']) (( i += lines ));     break;;    # f F ^F ^V SPACE                                    \r\n"
    ],
    [
      0.000079,
      "              [$'bB\\2']) (( i -= lines ));     break;;    # b B ^B                                             \r\n"
    ],
    [
      0.000080,
      "              [$'dD\\4']) (( i += lines / 2 )); break;;    # d D ^D                                             \r\n"
    ],
    [
      0.000079,
      "             [$'uU\\25']) (( i -= lines / 2 )); break;;    # u U ^U                                             \r\n"
    ],
    [
      0.000096,
      "\u001b[7m\u001b[Kpager (24/70)\u001b[m\u001b(B"
    ],
    [
      0.188031,
      "\u001b[1;1H[[ -t 1 ]] || { cat ; \u001b[7mexit\u001b[m\u001b(B; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" \u001b[7mexit\u001b[m\u001b(B                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n\u001b[7m\u001b[Kpager (10/70)\u001b[m\u001b(B"
    ],
    [
      0.196829,
      "\u001b[1;1H[[ -t 1 ]] || { cat ; \u001b[7mexit\u001b[m\u001b(B; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" \u001b[7mexit\u001b[m\u001b(B                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n\u001b[7m\u001b[Knot found\u001b[m\u001b(B"
    ],
    [
      0.196589,
      "\u001b[1;1H[[ -t 1 ]] || { cat ; \u001b[7mexit\u001b[m\u001b(B; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" \u001b[7mexit\u001b[m\u001b(B                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n\u001b[7m\u001b[Knot found\u001b[m\u001b(B"
    ],
    [
      0.356186,
      "\u001b[1;1H(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; \u001b[7mexit\u001b[m\u001b(B; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" \u001b[7mexit\u001b[m\u001b(B                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n\u001b[7m\u001b[Kpager (9/70)\u001b[m\u001b(B"
    ],
    [
      0.176561,
      "\u001b[1;1H[[ -t 1 ]] || { cat ; \u001b[7mexit\u001b[m\u001b(B; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" \u001b[7mexit\u001b[m\u001b(B                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n\u001b[7m\u001b[Kpager (10/70)\u001b[m\u001b(B"
    ],
    [
      0.188920,
      "\u001b[1;1H"
    ],
    [
      0.000086,
      "trap \"tput rmcup\" \u001b[7mexit\u001b[m\u001b(B                                                                                         \r\n"
    ],
    [
      0.000069,
      "tput smcup                                                                                                     \r\n"
    ],
    [
      0.000107,
      "tot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n"
    ],
    [
      0.000115,
      "                                                                                                               \r\n"
    ],
    [
      0.000107,
      "search () {                                                                                                    \r\n"
    ],
    [
      0.000110,
      "  while (( $1 )); do                                                                                           \r\n"
    ],
    [
      0.000109,
      "    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n"
    ],
    [
      0.000137,
      "      i=$j err=0; break 2                                                                                      \r\n"
    ],
    [
      0.000092,
      "    fi                                                                                                         \r\n"
    ],
    [
      0.000122,
      "  done                                                                                                         \r\n"
    ],
    [
      0.000095,
      "  err=1; break                                                                                                 \r\n"
    ],
    [
      0.000109,
      "}                                                                                                              \r\n"
    ],
    [
      0.000107,
      "                                                                                                               \r\n"
    ],
    [
      0.000121,
      "while :; do                                                                                                    \r\n"
    ],
    [
      0.000097,
      "  printf %s \"$cup\"                                                                                             \r\n"
    ],
    [
      0.000121,
      "  for (( j = i; j \u003c i + lines - 1; j++ )) do                                                                   \r\n"
    ],
    [
      0.000113,
      "    printf \"%s\\n\" \"${input[j]//$search/$hl$search$nohl}\"                                                       \r\n"
    ],
    [
      0.000101,
      "  done                                                                                                         \r\n"
    ],
    [
      0.000101,
      "  if (( err )); then err=0; printf \"%snot found%s\" \"$hl$el\" \"$nohl\"                                            \r\n"
    ],
    [
      0.000116,
      "  else printf \"%s%s (%s/%s)%s\" \"$hl$el\" \"${1-(stdin)}\" \"$((i+1))\" \"$limit\" \"$nohl\"                             \r\n"
    ],
    [
      0.000108,
      "  fi                                                                                                           \r\n"
    ],
    [
      0.000108,
      "  while read -rsN1 char; do                                                                                    \r\n"
    ],
    [
      0.000110,
      "    case $char in                                         # copied from less                                   \r\n"
    ],
    [
      0.000132,
      "       [$'eE\\5jJ\\n\\16']) (( i ++ ));           break;;    # e E ^E j J ^N CR                                   \r\n"
    ],
    [
      0.000127,
      "      [$'yY\\31kK\\v\\20']) (( i -- ));           break;;    # y Y ^Y k K ^K ^P                                   \r\n"
    ],
    [
      0.000078,
      "          [$'fF\\6\\26 ']) (( i += lines ));     break;;    # f F ^F ^V SPACE                                    \r\n"
    ],
    [
      0.000120,
      "              [$'bB\\2']) (( i -= lines ));     break;;    # b B ^B                                             \r\n"
    ],
    [
      0.000110,
      "              [$'dD\\4']) (( i += lines / 2 )); break;;    # d D ^D                                             \r\n"
    ],
    [
      0.000111,
      "             [$'uU\\25']) (( i -= lines / 2 )); break;;    # u U ^U                                             \r\n"
    ],
    [
      0.000162,
      "\u001b[7m\u001b[Kpager (24/70)\u001b[m\u001b(B"
    ],
    [
      0.175534,
      "\u001b[1;1H                   [qQ]) \u001b[7mexit\u001b[m\u001b(B                                                                                  \r\n    esac                                                                                                       \r\n  done                                                                                                         \r\n  (( i = i \u003e tot - lines ? tot - lines : i \u003c 0 ? 0 : i ))                                                      \r\ndone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Kpager (66/70)\u001b[m\u001b(B"
    ],
    [
      0.194107,
      "\u001b[1;1H                   [qQ]) \u001b[7mexit\u001b[m\u001b(B                                                                                  \r\n    esac                                                                                                       \r\n  done                                                                                                         \r\n  (( i = i \u003e tot - lines ? tot - lines : i \u003c 0 ? 0 : i ))                                                      \r\ndone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Knot found\u001b[m\u001b(B"
    ],
    [
      0.184390,
      "\u001b[1;1H                   [qQ]) \u001b[7mexit\u001b[m\u001b(B                                                                                  \r\n    esac                                                                                                       \r\n  done                                                                                                         \r\n  (( i = i \u003e tot - lines ? tot - lines : i \u003c 0 ? 0 : i ))                                                      \r\ndone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Knot found\u001b[m\u001b(B"
    ],
    [
      0.802597,
      "\u001b[1;1H    esac                                                                                                       \r\n  done                                                                                                         \r\n  (( i = i \u003e tot - lines ? tot - lines : i \u003c 0 ? 0 : i ))                                                      \r\ndone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Kpager (67/70)\u001b[m\u001b(B"
    ],
    [
      0.175997,
      "\u001b[1;1H  done                                                                                                         \r\n  (( i = i \u003e tot - lines ? tot - lines : i \u003c 0 ? 0 : i ))                                                      \r\ndone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Kpager (68/70)\u001b[m\u001b(B"
    ],
    [
      0.179661,
      "\u001b[1;1H  (( i = i \u003e tot - lines ? tot - lines : i \u003c 0 ? 0 : i ))                                                      \r\ndone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Kpager (69/70)\u001b[m\u001b(B"
    ],
    [
      0.173165,
      "\u001b[1;1Hdone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Kpager (70/70)\u001b[m\u001b(B"
    ],
    [
      0.497060,
      "\u001b[31;1H\u001b[K?"
    ],
    [
      0.536420,
      "e"
    ],
    [
      0.216204,
      "x"
    ],
    [
      0.121321,
      "i"
    ],
    [
      0.140217,
      "t"
    ],
    [
      0.135736,
      "\r\n\u001b[1;1H                   [qQ]) \u001b[7mexit\u001b[m\u001b(B                                                                                  \r\n    esac                                                                                                       \r\n  done                                                                                                         \r\n  (( i = i \u003e tot - lines ? tot - lines : i \u003c 0 ? 0 : i ))                                                      \r\ndone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Kpager (66/70)\u001b[m\u001b(B"
    ],
    [
      0.789665,
      "\u001b[1;1Htrap \"tput rmcup\" \u001b[7mexit\u001b[m\u001b(B                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n  for (( j = i; j \u003c i + lines - 1; j++ )) do                                                                   \r\n    printf \"%s\\n\" \"${input[j]//$search/$hl$search$nohl}\"                                                       \r\n  done                                                                                                         \r\n  if (( err )); then err=0; printf \"%snot found%s\" \"$hl$el\" \"$nohl\"                                            \r\n  else printf \"%s%s (%s/%s)%s\" \"$hl$el\" \"${1-(stdin)}\" \"$((i+1))\" \"$limit\" \"$nohl\"                             \r\n  fi                                                                                                           \r\n  while read -rsN1 char; do                                                                                    \r\n    case $char in                                         # copied from less                                   \r\n       [$'eE\\5jJ\\n\\16']) (( i ++ ));           break;;    # e E ^E j J ^N CR                                   \r\n      [$'yY\\31kK\\v\\20']) (( i -- ));           break;;    # y Y ^Y k K ^K ^P                                   \r\n          [$'fF\\6\\26 ']) (( i += lines ));     break;;    # f F ^F ^V SPACE                                    \r\n              [$'bB\\2']) (( i -= lines ));     break;;    # b B ^B                                             \r\n              [$'dD\\4']) (( i += lines / 2 )); break;;    # d D ^D                                             \r\n             [$'uU\\25']) (( i -= lines / 2 )); break;;    # u U ^U                                             \r\n\u001b[7m\u001b[Kpager (24/70)\u001b[m\u001b(B"
    ],
    [
      0.393584,
      "\u001b[1;1H[[ -t 1 ]] || { cat ; \u001b[7mexit\u001b[m\u001b(B; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" \u001b[7mexit\u001b[m\u001b(B                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n\u001b[7m\u001b[Kpager (10/70)\u001b[m\u001b(B"
    ],
    [
      0.670611,
      "\u001b[1;1H(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; \u001b[7mexit\u001b[m\u001b(B; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" \u001b[7mexit\u001b[m\u001b(B                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n\u001b[7m\u001b[Kpager (9/70)\u001b[m\u001b(B"
    ],
    [
      0.173799,
      "\u001b[1;1H                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; \u001b[7mexit\u001b[m\u001b(B; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" \u001b[7mexit\u001b[m\u001b(B                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\n\u001b[7m\u001b[Kpager (8/70)\u001b[m\u001b(B"
    ],
    [
      0.182525,
      "\u001b[1;1H#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; \u001b[7mexit\u001b[m\u001b(B; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" \u001b[7mexit\u001b[m\u001b(B                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n\u001b[7m\u001b[Kpager (7/70)\u001b[m\u001b(B"
    ],
    [
      0.183728,
      "\u001b[1;1H#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; \u001b[7mexit\u001b[m\u001b(B; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" \u001b[7mexit\u001b[m\u001b(B                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n\u001b[7m\u001b[Kpager (6/70)\u001b[m\u001b(B"
    ],
    [
      0.335685,
      "\u001b[31;1H\u001b[K/"
    ],
    [
      0.309668,
      "\r\n\u001b[1;1H#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n\u001b[7m\u001b[Kpager (6/70)\u001b[m\u001b(B"
    ],
    [
      0.361890,
      "\u001b[1;1H#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n\u001b[7m\u001b[Kpager (5/70)\u001b[m\u001b(B"
    ],
    [
      0.183146,
      "\u001b[1;1H#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n\u001b[7m\u001b[Kpager (4/70)\u001b[m\u001b(B"
    ],
    [
      0.208453,
      "\u001b[1;1H#!/bin/bash                                                                                                    \r\n# very simple pager with search                                                                                \r\n# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n\u001b[7m\u001b[Kpager (1/70)\u001b[m\u001b(B"
    ],
    [
      0.191214,
      "\u001b[1;1H#!/bin/bash                                                                                                    \r\n# very simple pager with search                                                                                \r\n# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n\u001b[7m\u001b[Kpager (1/70)\u001b[m\u001b(B"
    ],
    [
      0.383861,
      "\u001b[1;1H      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n  for (( j = i; j \u003c i + lines - 1; j++ )) do                                                                   \r\n    printf \"%s\\n\" \"${input[j]//$search/$hl$search$nohl}\"                                                       \r\n  done                                                                                                         \r\n  if (( err )); then err=0; printf \"%snot found%s\" \"$hl$el\" \"$nohl\"                                            \r\n  else printf \"%s%s (%s/%s)%s\" \"$hl$el\" \"${1-(stdin)}\" \"$((i+1))\" \"$limit\" \"$nohl\"                             \r\n  fi                                                                                                           \r\n  while read -rsN1 char; do                                                                                    \r\n    case $char in                                         # copied from less                                   \r\n       [$'eE\\5jJ\\n\\16']) (( i ++ ));           break;;    # e E ^E j J ^N CR                                   \r\n      [$'yY\\31kK\\v\\20']) (( i -- ));           break;;    # y Y ^Y k K ^K ^P                                   \r\n          [$'fF\\6\\26 ']) (( i += lines ));     break;;    # f F ^F ^V SPACE                                    \r\n              [$'bB\\2']) (( i -= lines ));     break;;    # b B ^B                                             \r\n              [$'dD\\4']) (( i += lines / 2 )); break;;    # d D ^D                                             \r\n             [$'uU\\25']) (( i -= lines / 2 )); break;;    # u U ^U                                             \r\n                      G) (( i = tot ));        break;;                                                         \r\n                      g) (( i = 0 ));          break;;                                                         \r\n                      :) printf %s \"$ll$el\"                                                                    \r\n                         read -rep: j                                                                          \r\n                         [[ $j != *[0-9]* ]] || (( i = j - 1 ))                                                \r\n                         break ;;                                                                              \r\n                   [/?]) printf %s \"$ll$el\"                                                                    \r\n\u001b[7m\u001b[Kpager (31/70)\u001b[m\u001b(B"
    ],
    [
      0.204653,
      "\u001b[1;1H                         history -s -- \"$search\"  ;;\u0026                                                          \r\n                      /) j=i-1 search \"j++ \u003c tot\" ;;                                                           \r\n                     \\?) j=i+1 search \"j-- \u003e= 0\"  ;;                                                           \r\n                      n) j=i   search \"j++ \u003c tot\" ;;                                                           \r\n                      N) j=i   search \"j-- \u003e= 0\"  ;;                                                           \r\n                   [qQ]) exit                                                                                  \r\n    esac                                                                                                       \r\n  done                                                                                                         \r\n  (( i = i \u003e tot - lines ? tot - lines : i \u003c 0 ? 0 : i ))                                                      \r\ndone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Kpager (61/70)\u001b[m\u001b(B"
    ],
    [
      0.296446,
      "\u001b[1;1H      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n  for (( j = i; j \u003c i + lines - 1; j++ )) do                                                                   \r\n    printf \"%s\\n\" \"${input[j]//$search/$hl$search$nohl}\"                                                       \r\n  done                                                                                                         \r\n  if (( err )); then err=0; printf \"%snot found%s\" \"$hl$el\" \"$nohl\"                                            \r\n  else printf \"%s%s (%s/%s)%s\" \"$hl$el\" \"${1-(stdin)}\" \"$((i+1))\" \"$limit\" \"$nohl\"                             \r\n  fi                                                                                                           \r\n  while read -rsN1 char; do                                                                                    \r\n    case $char in                                         # copied from less                                   \r\n       [$'eE\\5jJ\\n\\16']) (( i ++ ));           break;;    # e E ^E j J ^N CR                                   \r\n      [$'yY\\31kK\\v\\20']) (( i -- ));           break;;    # y Y ^Y k K ^K ^P                                   \r\n          [$'fF\\6\\26 ']) (( i += lines ));     break;;    # f F ^F ^V SPACE                                    \r\n              [$'bB\\2']) (( i -= lines ));     break;;    # b B ^B                                             \r\n              [$'dD\\4']) (( i += lines / 2 )); break;;    # d D ^D                                             \r\n             [$'uU\\25']) (( i -= lines / 2 )); break;;    # u U ^U                                             \r\n                      G) (( i = tot ));        break;;                                                         \r\n                      g) (( i = 0 ));          break;;                                                         \r\n                      :) printf %s \"$ll$el\"                                                                    \r\n                         read -rep: j                                                                          \r\n                         [[ $j != *[0-9]* ]] || (( i = j - 1 ))                                                \r\n                         break ;;                                                                              \r\n                   [/?]) printf %s \"$ll$el\"                                                                    \r\n\u001b[7m\u001b[Kpager (31/70)\u001b[m\u001b(B"
    ],
    [
      0.168772,
      "\u001b[1;1H#!/bin/bash                                                                                                    \r\n# very simple pager with search                                                                                \r\n# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n\u001b[7m\u001b[Kpager (1/70)\u001b[m\u001b(B"
    ],
    [
      0.163801,
      "\u001b[1;1H#!/bin/bash                                                                                                    \r\n# very simple pager with search                                                                                \r\n# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n\u001b[7m\u001b[Kpager (1/70)\u001b[m\u001b(B"
    ],
    [
      0.341030,
      "\u001b[31;1H\u001b[K:"
    ],
    [
      0.453286,
      "1"
    ],
    [
      0.658420,
      "5"
    ],
    [
      0.026924,
      "4"
    ],
    [
      0.528527,
      "\u0008\u001b[K"
    ],
    [
      0.240717,
      "\r\n\u001b[1;1Hwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n  done                                                                                                         \r\n  err=1; break                                                                                                 \r\n}                                                                                                              \r\n                                                                                                               \r\nwhile :; do                                                                                                    \r\n  printf %s \"$cup\"                                                                                             \r\n  for (( j = i; j \u003c i + lines - 1; j++ )) do                                                                   \r\n    printf \"%s\\n\" \"${input[j]//$search/$hl$search$nohl}\"                                                       \r\n  done                                                                                                         \r\n  if (( err )); then err=0; printf \"%snot found%s\" \"$hl$el\" \"$nohl\"                                            \r\n  else printf \"%s%s (%s/%s)%s\" \"$hl$el\" \"${1-(stdin)}\" \"$((i+1))\" \"$limit\" \"$nohl\"                             \r\n\u001b[7m\u001b[Kpager (15/70)\u001b[m\u001b(B"
    ],
    [
      1.775122,
      "\u001b[31;1H\u001b[K:"
    ],
    [
      0.340714,
      "1"
    ],
    [
      0.142915,
      "2"
    ],
    [
      0.178224,
      "2"
    ],
    [
      0.071436,
      "3"
    ],
    [
      0.036447,
      "4"
    ],
    [
      0.221126,
      "3"
    ],
    [
      0.303835,
      "\r\n\u001b[1;1Hdone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Kpager (70/70)\u001b[m\u001b(B"
    ],
    [
      1.483161,
      "\u001b[1;1H#!/bin/bash                                                                                                    \r\n# very simple pager with search                                                                                \r\n# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n\u001b[7m\u001b[Kpager (1/70)\u001b[m\u001b(B"
    ],
    [
      0.750916,
      "\u001b[1;1Hdone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Kpager (70/70)\u001b[m\u001b(B"
    ],
    [
      0.650932,
      "\u001b[1;1H#!/bin/bash                                                                                                    \r\n# very simple pager with search                                                                                \r\n# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n\u001b[7m\u001b[Kpager (1/70)\u001b[m\u001b(B"
    ],
    [
      0.746486,
      "\u001b[1;1Hdone \u003c /dev/tty                                                                                                \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n~                                                                                                              \r\n\u001b[7m\u001b[Kpager (70/70)\u001b[m\u001b(B"
    ],
    [
      0.586233,
      "\u001b[1;1H#!/bin/bash                                                                                                    \r\n# very simple pager with search                                                                                \r\n# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n\u001b[7m\u001b[Kpager (1/70)\u001b[m\u001b(B"
    ],
    [
      1.625288,
      "\u001b[1;1H# very simple pager with search                                                                                \r\n# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n\u001b[7m\u001b[Kpager (2/70)\u001b[m\u001b(B"
    ],
    [
      0.173126,
      "\u001b[1;1H# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n\u001b[7m\u001b[Kpager (3/70)\u001b[m\u001b(B"
    ],
    [
      0.177624,
      "\u001b[1;1H#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n    fi                                                                                                         \r\n\u001b[7m\u001b[Kpager (4/70)\u001b[m\u001b(B"
    ],
    [
      0.303059,
      "\u001b[1;1H# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n      i=$j err=0; break 2                                                                                      \r\n\u001b[7m\u001b[Kpager (3/70)\u001b[m\u001b(B"
    ],
    [
      0.183642,
      "\u001b[1;1H# very simple pager with search                                                                                \r\n# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n    if [[ ${input[j]} = *$search* ]]; then                                                                     \r\n\u001b[7m\u001b[Kpager (2/70)\u001b[m\u001b(B"
    ],
    [
      0.196572,
      "\u001b[1;1H#!/bin/bash                                                                                                    \r\n# very simple pager with search                                                                                \r\n# TODO: - find a way to print while reading from stdin                                                         \r\n#       - print help message with h                                                                            \r\n#       - handle escapes correctly                                                                             \r\n#       - react upon resize                                                                                    \r\n#       - add actual useful functions                                                                          \r\n                                                                                                               \r\n(( $# )) \u0026\u0026 exec \u003c \"$1\"                                                                                        \r\n[[ -t 1 ]] || { cat ; exit; }                                                                                  \r\nlines=$(tput lines) cols=$(tput cols) hl=$(tput rev) nohl=$(tput sgr0)                                         \r\ncup=$(tput cup 0 0) el=$(tput el) ll=$(tput cup \"$lines\" 0)                                                    \r\n                                                                                                               \r\n# slurp stdin first                                                                                            \r\nwhile read -rn \"$cols\"; do                        # at most $cols characters                                   \r\n  printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"  # fill with blanks                                           \r\ndone \u003c \u003c(cat -v | expand)                         # escape sequences are hard                                  \r\n[[ $REPLY ]] \u0026\u0026 printf -v \"input[i++]\" \"%-*s\" \"$cols\" \"$REPLY\"                                                 \r\n                                                                                                               \r\nfor (( j = lines; j \u003e 1; j-- )) do                                                                             \r\n  printf -v \"input[i++]\" \"~%*s\" \"$((cols-1))\"     # classic                                                    \r\ndone                                                                                                           \r\n                                                                                                               \r\ntrap \"tput rmcup\" exit                                                                                         \r\ntput smcup                                                                                                     \r\ntot=$i i=0 IFS= limit=$((tot-lines+1))                                                                         \r\n                                                                                                               \r\nsearch () {                                                                                                    \r\n  while (( $1 )); do                                                                                           \r\n\u001b[7m\u001b[Kpager (1/70)\u001b[m\u001b(B"
    ],
    [
      0.277849,
      "\u001b[r\u001b[?1049l"
    ],
    [
      0.000964,
      "\u001b[38;5;1m$\u001b[m\u001b(B                                                                                                              \r"
    ],
    [
      0.001820,
      "\u001b[38;5;2mizabera\u001b[m\u001b(B@\u001b[38;5;6mnotebook\u001b[m\u001b(B \u001b[38;5;1m~\u001b[38;5;9m/\u001b[38;5;1msv\u001b[38;5;9m/\u001b[38;5;1mbashutils\u001b[m\u001b(B \u001b[38;5;2m$\u001b[m\u001b(B "
    ],
    [
      1.244980,
      "Use \"exit\" to leave the shell.\r\n\u001b[38;5;1m$\u001b[m\u001b(B                                                                                                              \r\u001b[38;5;2mizabera\u001b[m\u001b(B@\u001b[38;5;6mnotebook\u001b[m\u001b(B \u001b[38;5;1m~\u001b[38;5;9m/\u001b[38;5;1msv\u001b[38;5;9m/\u001b[38;5;1mbashutils\u001b[m\u001b(B \u001b[38;5;2m$\u001b[m\u001b(B "
    ],
    [
      0.169558,
      "exit\r\n"
    ]
  ]
}